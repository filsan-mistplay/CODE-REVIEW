WITH events AS(-- table combines all the information for experiment from lp events and adds variant info from the lp abtest
SELECT DISTINCT user_id AS uid
      ,le.name AS event_type
      ,abtest.variant_id AS variant_id
      ,abtest.name AS ab_test_name
      ,variant_name AS test_control
      ,message.campaign_name AS campaign_name
FROM de_external_sources.leanplum_events AS le
LEFT JOIN de_external_sources.leanplum_abtest AS ab ON le.abtest.variant_id = ab.variant_id
WHERE (UPPER(abtest.name) LIKE '%C340%'
OR UPPER(message.campaign_name) LIKE '%C340%')
AND (abtest.name LIKE '%In-App%'
OR message.campaign_name LIKE '%In-App%'))

,control AS(
SELECT events.uid
      ,'CONTROL' AS test_control
FROM events
LEFT JOIN mistplayetl.users ON events.uid = users.uid
LEFT JOIN mistplayetl.inapppurchases ON events.uid = inapppurchases.uid
WHERE ab_test_name LIKE '%Holdback%'
AND test_control LIKE '%Control%'-- restricts to control group users
AND abt > 3-- ab group restriction
AND b_reason IS NULL -- user is not banned
AND (isdev IS NULL OR isdev = false)) -- account type is not a dev account

,test AS(
SELECT events.uid
      ,'VARIANT'AS test_control
FROM events
LEFT JOIN mistplayetl.users ON events.uid = users.uid
WHERE ab_test_name LIKE '%Holdback%'
AND test_control LIKE '%Enabled%' -- restricts to variant group users
AND abt > 3 -- ab group restriction
AND b_reason IS NULL -- user is not banned
AND (isdev IS NULL OR isdev = false) -- account type is not a dev account
AND events.uid NOT IN (SELECT uid FROM control)) -- user is not in control group

,ab_groups AS(
(SELECT * FROM control)
UNION
(SELECT * FROM test))

,contests AS(
SELECT ab_groups.uid
      ,test_control
      ,contest_id
      ,join_ts
      ,entered_ts
FROM ab_groups
LEFT JOIN mistplayetl.usercontests ON ab_groups.uid = usercontests.uid
where contest_id LIKE 'US_Nov28_2023_BingoBlitz%'
OR contest_id LIKE '%CA_Nov28_2023_doomsday%')

SELECT contest_id
      ,test_control
      ,COUNT(distinct uid) AS num_users_table
      ,SUM(CASE WHEN join_ts IS NOT NULL THEN 1 ELSE 0 END) AS num_joined
      ,SUM(CASE WHEN entered_ts IS NOT NULL THEN 1 else 0 END) AS num_entered
FROM contests
GROUP BY 1,2
ORDER BY 1 DESC, 2 ASC
